{"version":3,"sources":["js/03-promises.js"],"names":["refFirstDelay","document","querySelectorAll","refDelayStep","refAmount","refForm","querySelector","addEventListener","onFormSubmit","intervalId","numberPromises","firstDelay","value","delayStep","position","event","preventDefault","amount","setTimeout","delay","createPromise","then","console","log","catch","setInterval","clearInterval","Promise","resolve","reject","shouldResolve","Math","random"],"mappings":";AAAA,MAAMA,EAAgBC,SAASC,iBAAiB,SAAS,GACnDC,EAAeF,SAASC,iBAAiB,SAAS,GAClDE,EAAYH,SAASC,iBAAiB,SAAS,GAC/CG,EAAUJ,SAASK,cAAc,SACvCD,EAAQE,iBAAiB,SAAUC,GAEnC,IAAIC,EAAa,KACbC,EAAiB,EACjBC,EAAaX,EAAcY,MAC3BC,EAAYV,EAAaS,MACzBE,EAAWJ,EAAiB,EAEhC,SAASF,EAAaO,GACpBA,EAAMC,iBACNC,OAASb,EAAUQ,MAClBM,WAAW,KACPC,MAAQR,EACRS,EAAcN,EAAUK,OACtBE,KAAK,EAAGP,SAAAA,EAAUK,MAAAA,MACjBG,QAAQC,2BAA2BT,QAAeK,SAEnDK,MAAM,EAAGV,SAAAA,EAAUK,MAAAA,MACpBG,QAAQC,0BAA0BT,QAAeK,SAEpDT,GAAkB,GACjBC,GAGDF,EAAagB,YAAY,KACtBR,OAASP,GACXA,GAAkB,EAClBS,MAAQR,EAAaE,EACrBO,EAAcN,EAAUK,OACrBE,KAAK,EAAGP,SAAAA,EAAUK,MAAAA,MACjBG,QAAQC,2BAA2BT,QAAeK,SAEnDK,MAAM,EAAGV,SAAAA,EAAUK,MAAAA,MACpBG,QAAQC,0BAA0BT,QAAeK,UAGnDO,cAAcjB,IAEbI,GAMP,SAASO,EAAcN,EAAUK,GAExB,OAAA,IAAIQ,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCd,WAAW,KACLY,EACNF,yBAA+Bd,QAAeK,OAE9CU,EAAO,2CAEJV","file":"03-promises.8a653bf5.js","sourceRoot":"../src","sourcesContent":["const refFirstDelay = document.querySelectorAll('input')[0];\nconst refDelayStep = document.querySelectorAll('input')[1];\nconst refAmount = document.querySelectorAll('input')[2];\nconst refForm = document.querySelector('.form');\nrefForm.addEventListener('submit', onFormSubmit);\n\nlet intervalId = null;\nlet numberPromises = 0;\nlet firstDelay = refFirstDelay.value;\nlet delayStep = refDelayStep.value;\nlet position = numberPromises + 1;\n\nfunction onFormSubmit(event) {\n  event.preventDefault()\n  amount = refAmount.value;\n   setTimeout(() => {\n       delay = firstDelay;\n       createPromise(position, delay)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n     numberPromises += 1;\n   }, firstDelay);\n  \n  \n     intervalId = setInterval(() => {\n    if (amount > numberPromises) {\n      numberPromises += 1;\n      delay = firstDelay + delayStep;\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    } else {\n      clearInterval(intervalId);\n    }\n    }, delayStep); \n      \n        \n  \n}\n\nfunction createPromise(position, delay) {\n  \n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n    resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    reject(\"Error! Error passed to reject function\");\n  }\n    }, delay);\n    \n  })\n}\n"]}