{"version":3,"sources":["js/03-promises.js"],"names":["refFirstDelay","document","querySelectorAll","refDelayStep","refAmount","refForm","querySelector","addEventListener","onFormSubmit","intervalId","numberPromises","event","preventDefault","amount","Number","value","firstDelay","delayStep","i","createPromise","then","position","delay","console","log","catch","Promise","resolve","reject","setTimeout","Math","random"],"mappings":";AAAA,MAAMA,EAAgBC,SAASC,iBAAiB,SAAS,GACnDC,EAAeF,SAASC,iBAAiB,SAAS,GAClDE,EAAYH,SAASC,iBAAiB,SAAS,GAC/CG,EAAUJ,SAASK,cAAc,SACvCD,EAAQE,iBAAiB,SAAUC,GAEnC,IAAIC,EAAa,KACbC,EAAiB,EAGrB,SAASF,EAAaG,GACpBA,EAAMC,iBACAC,MAAAA,EAASC,OAAOV,EAAUW,OAC5BC,IAAAA,EAAaF,OAAOd,EAAce,OAClCE,EAAYH,OAAOX,EAAaY,OAC1B,IAAA,IAAIG,EAAI,EAAGA,EAAIL,EAAQK,GAAK,EAE/BC,EAAcD,EAAE,EAAGF,GACnBI,KAAK,EAAGC,SAAAA,EAAUC,MAAAA,MACjBC,QAAQC,2BAA2BH,QAAeC,SAEnDG,MAAM,EAAGJ,SAAAA,EAAUC,MAAAA,MACpBC,QAAQC,0BAA0BH,QAAeC,SAEhDN,GAAcC,EAQvB,SAASE,EAAeE,EAAUC,GAEzB,OAAA,IAAII,QAAQ,CAACC,EAASC,KAE3BC,WAAW,KACaC,KAAKC,SAAW,GAExCJ,EAAQ,CAACN,SAAAA,EAAUC,MAAAA,IAEnBM,EAAO,CAACP,SAAAA,EAAUC,MAAAA,KAEfA","file":"03-promises.7985d798.js","sourceRoot":"../src","sourcesContent":["const refFirstDelay = document.querySelectorAll('input')[0];\nconst refDelayStep = document.querySelectorAll('input')[1];\nconst refAmount = document.querySelectorAll('input')[2];\nconst refForm = document.querySelector('.form');\nrefForm.addEventListener('submit', onFormSubmit);\n\nlet intervalId = null;\nlet numberPromises = 0;\n\n\nfunction onFormSubmit(event) {\n  event.preventDefault()\n  const amount = Number(refAmount.value);\n  let firstDelay = Number(refFirstDelay.value);\n  let delayStep = Number(refDelayStep.value);\n       for (let i = 0; i < amount; i += 1) {\n         \n         createPromise(i+1, firstDelay)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n         firstDelay += delayStep;\n       }\n      \n      \n        \n  \n}\n\nfunction createPromise( position, delay ) {\n  \n  return new Promise((resolve, reject) => {\n    \n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n    resolve({position, delay});\n  } else {\n    reject({position, delay});\n  }\n    }, delay);\n    \n  })\n}\n"]}